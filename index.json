{
  "index.html": {
    "href": "index.html",
    "title": "PLATEAU SDK for Unreal | PLATEAU SDK for Unreal",
    "keywords": "PLATEAU SDK for Unreal このパッケージには、 PLATEAU の3D都市モデルデータを利用するためのAPI、サンプルが含まれます。PLATEAU SDK for Unrealを利用することで、実世界を舞台にしたゲームの開発や、PLATEAUの豊富なデータを活用したシミュレーションを簡単に行うことができます。"
  },
  "manual/AccessCityObject.html": {
    "href": "manual/AccessCityObject.html",
    "title": "都市情報へのアクセス | PLATEAU SDK for Unreal",
    "keywords": "都市情報へのアクセス C#プログラムによって都市情報にアクセスする手順は、おおまかには次のとおりです。 GameObject から CityObject を取得 CityObject から 属性(AttributesMap) を取得 属性から値を取得 以下で詳しく解説します。 まずサンプルを提示し、次に都市情報を取得するために知っておくべきことを解説します。 サンプル シーンに配置された都市の3Dモデルから、都市情報の1つである属性を取得できます。 そのサンプルとして、 PlateauLogAttributes シーンをご覧ください。 シーンを開いてPlayボタンを押すと、建物の情報がUnityコンソールに表示されます。 そのコードのサンプルが PlateauAttributesLogger.cs になります。 属性とは 取得できる都市情報の1つに「属性」があります。 属性は例えば (String) 大字・町コード => 42, (String) 防火及び準防火地域 => 準防火地域 のように、キーと値のペアからなる辞書形式の情報です。 属性の値は文字列型として取得できるか、または 子の属性（属性は入れ子になることもあります）として取得できるかのいずれかです。 属性が入れ子になっている例は次のとおりです（サンプルシーンの実行結果から抜粋）。 (AttributeSet) 多摩水系多摩川、浅川、大栗川洪水浸水想定区域（想定最大規模） => [ { (String) 浸水ランク => 2 } { (Measure) 浸水深 => 0.990 } { (Measure) 継続時間 => 0.68 } { (String) 規模 => L2 } ]} 上の例において、(括弧)内の文字は属性の型を示します。 属性は次の型があります: AttributeSet, String, Double, Integer, Data, Uri, Measure AttributeSet以外の型はすべて内部的には文字列型であり、 attributeValue.AsString で値を取得できます。 入れ子AttributeSetの値は AsString では取得できず、 attributeValue.AsAttrSet で取得できます。 属性の取得 シーンの GameObject から都市情報の属性を取得する方法については サンプルの PlateauAttributesLogger.cs が例になります。 その補足として、方法の概要を以下に記します。 シーンのヒエラルキー PlateauデータをUnityにインポートすると、 サンプルシーンにあるとおり、次の階層構造でオブジェクトが配置されます。 都市モデルルート( CityBehaviour がアタッチされます ) → 子 : 3Dモデルファイルのインスタンス ( プレハブとして配置されます ) → 子 : CityObject に対応する GameObject すなわち、 CityBehaviour の孫にあたる GameObject が CityObject と対応します。 CityObject の取得 GameObject の名称から CityObject を取得するには次のようにします。 var cityObj = cityBehaviour.LoadCityObject(gameObj.name); そうすると CityBehaviour は自身の参照するメタデータを利用し、 GameObjectの名称からどの gml ファイルをロードするべきか検索します。 そして gmlファイルから CityModel ロードして（ロード済みの場合はキャッシュが使われます）、 CityModel のうち 該当する CityObject を返します。 補足: ここで利用するメタデータとは、 インポート時に生成される CityMetaData型の Scriptable Object です。 CityMetaDataは、インポート時に GameObject名と gmlファイル名の対応表を記録します。 CityObject の属性の取得 CityObject から属性を取得するには、 cityObject.AttributesMap を利用します。 属性については上述の通りです。"
  },
  "manual/ImportCityModels.html": {
    "href": "manual/ImportCityModels.html",
    "title": "都市モデルのインポート | PLATEAU SDK for Unreal",
    "keywords": "都市モデルのインポート このページでは、都市データをUnrealプロジェクトにインポートする手順を説明します。 準備 都市データを用意します。 これは国土交通省のPLATEAUのWebサイトからダウンロードできます。 PlateauSDK を導入したUnrealプロジェクトを用意します。 SDKの導入方法は インストール を参照してください。 インポート手順 インポート元の選択 Unrealのメニューバーから PLATEAU → 都市モデルをインポート を選択します。 するとインポートウィンドウが表示されます。 参照 ボタンから都市データのフォルダを選択します。 都市データのフォルダは、中に udx , codelists という名称のフォルダがあるはずです。 インポート対象の絞り込み インポートする対象を選択します。 地域IDと地物タイプのチェックボックスで対象を絞り込むことができます。 地域IDの選択 地域IDの選択では下図のように、まず6桁の地域IDにチェックを入れます。 するとそれよりも細かい区分である 8桁の地域IDのチェックボックスが表示されます。 地域IDを確認するには、ダウンロードしたフォルダに付属している indexmap という名前のpdfファイルをご覧ください。 下図のように地図上に地域IDが記載されています。 地物タイプの選択 インポートしたい地物のタイプについて、下図のようにチェックマークを入れてください。 灰色になり選択できないタイプは、データの中に含まれていないタイプです。 変換設定 3Dモデルのメッシュに関する変換設定をします。 基本メッシュ設定 テクスチャを含める チェックマークを入れるとテクスチャも合わせて出力されます。 メッシュ結合単位 主要地物単位 メッシュは建物ごとに分かれて出力されます。 建物ごとに地物データを取得できるようにしたい場合はこちらを選択します。 最小地物単位 屋根、壁単位など非常に細かくオブジェクトを分けたい場合はこちらを選択します。 都市モデル地域単位 メッシュは1つに結合されて出力されます。 オブジェクト数を削減して軽量化できますが、建物ごとの地物データは取得不可になります。 地物タイプ別 メッシュ設定 地物タイプ別に、出力するLODを選択します。 Note LODとは gmlファイルの中には、都市モデルの形状の細かさを変えたいという需要に対応するため、 複数の形状データが格納されている場合があります。 LOD0がもっとも大雑把な形状で、LOD1, LOD2 と数字が上がるほど細かい形状になります。 建築物の場合、LOD0 は平面、LOD1は平面に一定の高さを付けたもの、LOD2はより細かい形状です。 出力モード 全てのLOD スライダーで選択したLOD範囲のうち、データがあるLOD形状をすべて出力します。 最大LODのみ スライダーで選択したLOD範囲のうち、データがある中で最大のLOD形状を1つ出力します。 LODスライダー ドラッグで動かしてLODの範囲を指定します。 出力先選択とインポートの実行 出力 ボタンを押してインポートを実行します。 3Dモデルファイルとメタデータの出力先を指定します。 出力先はUnrealプロジェクトのContentフォルダの内部である必要があります。 ここで選択したフォルダに、 gml ファイルを変換した 3Dモデル(.obj形式)ファイル および メタデータが出力されます。 Note ここで選択したフォルダとは別に、インポート元となる都市データも合わせてUnrealプロジェクト内にコピーされます。 こちらのコピー先は、上の設定に関わらず Content/PLATEAU になります。 こうする意図は、Unrealアプリケーションの実行中にgmlファイルのデータを取得する目的で、gmlファイルを Contentフォルダに配置する必要があるためです。 なお、インポート対象として選択したものに関連するもののみがコピーされます。 出力結果を確認します。 3Dモデルファイル(.obj形式)が指定した出力先に生成されます。 変換したモデルがUnrealのシーンに自動で配置されます。 変換元ファイルが Content/PLATEAU にコピーされています。 メタデータが出力先に配置されます。 Note メタデータを選択すると再変換の画面がインスペクタに表示されます。 メタデータはインポート時の設定を覚えているので、「設定を少し変えて再変換」する操作が便利にできるようになっています。 また、再変換時はシーンに配置されたモデルも置き換わります。 変換せずにLODを指定して再配置するオプションもあります。"
  },
  "manual/Installation.html": {
    "href": "manual/Installation.html",
    "title": "インストール | PLATEAU SDK for Unreal",
    "keywords": "インストール 対応Unrealバージョンのインストール PLATEAU UE SDK は、Unrealバージョン 4.27 を想定しています。 そのバージョンがインストールされていない場合は、次の手順でインストールしてください。 Epic Games Launcher をこちらからインストールします 。 Epic Games Launcherを起動し、左のサイドバーから Unreal Engine → 上のメニューから ライブラリ をクリックします。 Engineバージョン の隣のプラスボタンをクリックしてバージョンを追加し、数字を選択して4.27 で始まるバージョンを選択し、 インストール を押します。 Unrealプロジェクトの作成 先ほどインストールしたバージョンを起動します。 新規プロジェクトの欄から ゲーム を選択し、 次へ を押します。 テンプレート選択で blank を選択し、 次へ を押します。 プロジェクト名と保存先を入力し プロジェクト作成 を押します。 PLATEAU UE SDK の導入 PLATEAU UE SDK をこちらからダウンロードします 。 作成したプロジェクトのフォルダに Plugins という名前のフォルダを作成し、先程ダウンロードしたSDKをコピーします。 プロジェクトを開く際に以下の画面が表示されるので はい を押して完了です。"
  },
  "manual/Tutorial.html": {
    "href": "manual/Tutorial.html",
    "title": "チュートリアル | PLATEAU SDK for Unreal",
    "keywords": "チュートリアル"
  }
}